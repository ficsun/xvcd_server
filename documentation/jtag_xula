Extra exit-DR loop also?

TDI_TDO_CMD seems to hang at too high speeds. We might need to track IR to
determine if TDI_CMD or TDO_CMD is in place...
Using this the performance is now quite OK, maybe could be better if we faked
writing and cached in largen parts of the bitstream.

===================
The following describes the TDI_TDO_CMD which should be suitable for this
project.
===================

This command assumes JTAG state is "Shift DR" or "Shift IR" and on the last
bit it will send TMS=1 and move the state to "Exit 1 DR" or "Exit 1 IR".
Because of the last TMS we either need to know the exact length before we
start sending data (we don't in the xvc protocol) or we will have to go back
to "Shift DR" or "Shift IR" via TMS="010"

struct // JTAG_CMD structure
{
    USBCMD cmd;
    DWORD  num_clks;
    BYTE   flags;
};

JTAG_CMD structure seems to be used for command package with flags unused.
Data begins in second package and packages should be filled until the final
package. Field "cmd" is little-endian.

The bitstreams uses a byte array with 0:th bytes LSB (Least Significant Bit) as
first bit.

After every package with data sent, a package with data is sent back.

For everything except the last byte, the adapter will use the MSSP for
accelerating the JTAG operations, otherwise bit-banging is used. Final usb
byte is always bit-banged.

===================
The following describes the JTAG_CMD command which I deem unsuitable as TDI and
TDO combination isn't accelerated and we have no way of tracking this in this
project.
===================

First package for JTAG_CMD has the following structure

struct // JTAG_CMD structure
{
    USBCMD cmd;
    DWORD  num_clks;
    BYTE   flags;
};

// Definitions for JTAG_CMD
#define JTAG_CMD_HDR_LEN 6

// Flag bits for JTAG_CMD
#define GET_TDO_MASK 0x01	// Set if gathering TDO bits.
#define PUT_TMS_MASK 0x02	// Set if TMS bits are included in the packets.
#define TMS_VAL_MASK 0x04	// Static value for TMS if PUT_TMS_MASK is cleared.
#define PUT_TDI_MASK 0x08	// Set if TDI bits are included in the packets.
#define TDI_VAL_MASK 0x10	// Static value for TDI if PUT_TDI_MASK is cleared.

#define USBGEN_EP_SIZE 32U

If only using one of GET_TDO_MASK or GET_TDO_MASK and not PUT_TMS_MASK, the
adapter will use MSSP for greater JTAG performance, otherwise bit-banging
is used. Final usb package with data is always bit-banged.

The bitstreams uses a byte array with 0:th bytes LSB (Least Significant Bit) as
first bit. When both TMS and TDI is sent the bitstreams are interlaced as
follows

<TMS byte 0><TDI byte 0><TMS byte 1><TDI byte 1>...

with first bit of each byte being the LSB.

First package should also contain data after the JTAG_CMD header. Each package
is maximum 32 bytes which leaves 26 bytes data.

Bits after the data in the last byte can be anything, XuLA doesn't care about
these.


